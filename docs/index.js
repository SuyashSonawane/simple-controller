const t = "SIMPLE"; const o = "CONTROLLER"; let n; let i = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia; let r; let d; let l = null; let a = null; let c = false; let s = null; let u = null; let g = null; let e = null; let m = null; let f = true; let h = true; let y = false; $(".meet-controls-bar").hide(); $("#stopScreenShareBtn").hide(); $("#cursorToggle").hide(); $("#createRoomBtn").click(v); $("#joinRoomBtn").click(x); $("#startScreenShareBtn").click(N); $("#stopScreenShareBtn").click(A); $("#videoToggle").click(C); $("#audioToggle").click(M); $("#cursorToggle").click(B); $("#localToggle").click(O); function v() { console.log("Creating Room"); let e = $("#room-input").val(); if (e == " " || e == "") { alert("Please enter room number"); return } n = t + e + o; l = new Peer(n); l.on("open", e => { console.log("Peer Connected with ID: ", e); R(); i({ video: true, audio: true }, e => { r = e; b(r) }, e => { console.log(e) }); J("Waiting for peer to join.") }); l.on("connection", e => { s = e; e.on("data", e => { L(e) }) }); l.on("call", e => { e.answer(r); e.on("stream", e => { I(e) }); a = e; $(".meet-controls-bar").show() }) } function S(e) { let t = document.querySelector("#remote-video").getBoundingClientRect(); let o = { x: e.pageX - t.left, y: e.pageY - t.top }; if (o.x >= 0 && o.x < t.width && o.y >= 0 && o.y < t.height) { g = `${Math.round(t.width)}-${Math.round(t.height)}-${Math.round(o.x)}-${Math.round(o.y)}` } } function k(e) { let t = document.querySelector("#remote-video").getBoundingClientRect(); let o = { x: e.pageX - t.left, y: e.pageY - t.top }; if (o.x >= 0 && o.x < t.width && o.y >= 0 && o.y < t.height) { s.send(JSON.stringify({ mode: "MOUSE-CLICK-LEFT", data: `${Math.round(t.width)}-${Math.round(t.height)}-${Math.round(o.x)}-${Math.round(o.y)}` })) } } function p(e) { if (e.key === "Tab" || e.key === "Alt" || e.key === "Shift") { e.preventDefault() } s.send(JSON.stringify({ mode: "KEY", data: e.key.split("Arrow").splice(-1)[0] })) } function E(e) { s.send(JSON.stringify({ mode: "SCROLL", data: e.wheelDelta })) } function T() { $("#startScreenShareBtn").hide(); $("#cursorToggle").show(); document.getElementById("remote-video").oncontextmenu = e => { let t = document.querySelector("#remote-video").getBoundingClientRect(); let o = { x: e.pageX - t.left, y: e.pageY - t.top }; if (o.x >= 0 && o.x < t.width && o.y >= 0 && o.y < t.height) { s.send(JSON.stringify({ mode: "MOUSE-CLICK-RIGHT", data: `${Math.round(t.width)}-${Math.round(t.height)}-${Math.round(o.x)}-${Math.round(o.y)}` })) } return false }; document.body.addEventListener("wheel", E); document.body.addEventListener("keydown", p); document.getElementById("remote-video").addEventListener("click", k); document.addEventListener("mousemove", S); m = setInterval(() => { if (g !== e) s.send(JSON.stringify({ mode: "MOUSE-DATA", data: g })); e = g }, 60) } function w() { $("#startScreenShareBtn").show(); $("#cursorToggle").hide(); clearInterval(m); document.body.removeEventListener("keydown", p); document.body.removeEventListener("wheel", E); document.getElementById("remote-video").removeEventListener("click", k); document.removeEventListener("mousemove", S); document.getElementById("remote-video").oncontextmenu = null } function L(e) { e = JSON.parse(e); if (e["mode"] === "ALERT") { if (e["data"] === 0) { console.log("staring screen share"); T() } else if (e["data"] === 1) { console.log("stoping screen share"); w() } else if (e["data"] === 2) J(`remote video enabled: ${e["status"]}`); else if (e["data"] === 3) J(`remote audio enabled: ${e["status"]}`) } else if (e["mode"] === "MOUSE-DATA") { u.send(JSON.stringify({ mode: "mouse-data", data: e["data"] })) } else if (e["mode"] === "MOUSE-CLICK-LEFT") u.send(JSON.stringify({ mode: "mouse-click-left", data: e["data"] })); else if (e["mode"] === "MOUSE-CLICK-RIGHT") u.send(JSON.stringify({ mode: "mouse-click-right", data: e["data"] })); else if (e["mode"] === "KEY") u.send(JSON.stringify({ mode: "key", data: e["data"] })); else if (e["mode"] === "SCROLL") u.send(JSON.stringify({ mode: "scroll", data: e["data"] })) } function O() { $("#localToggle").toggleClass("active"); if ($("#local-video:visible").length) $("#local-video").hide(); else $("#local-video").show() } function C() { $("#videoToggle").toggleClass("active"); f = !f; r.getVideoTracks()[0].enabled = f; s.send(JSON.stringify({ mode: "ALERT", data: 2, status: f })) } function M() { $("#audioToggle").toggleClass("active"); h = !h; r.getAudioTracks()[0].enabled = h; s.send(JSON.stringify({ mode: "ALERT", data: 3, status: h })) } function B() { $("#cursorToggle").toggleClass("active"); y ? $("#remote-video").css("cursor", "default") : $("#remote-video").css("cursor", "none"); y = !y } function b(e) { let t = document.getElementById("local-video"); t.srcObject = e; t.muted = true; t.play() } function I(e) { let t = document.getElementById("remote-video"); t.srcObject = e; t.play() } function R() { document.getElementById("entry-modal").hidden = true } function J(e) { let t = document.getElementById("notification"); t.innerHTML = e; t.hidden = false; setTimeout(() => { t.hidden = true }, 5e3) } function x() { console.log("Joining Room"); let e = $("#room-input").val(); if (e == " " || e == "") { alert("Please enter room number"); return } n = t + e + o; R(); l = new Peer; l.on("open", e => { console.log("Connected with Id: " + e); i({ video: true, audio: true }, e => { r = e; b(r); J("Joining peer"); let t = l.call(n, e); let o = l.connect(n); o.on("open", () => { o.on("data", e => { L(e) }); s = o }); t.on("stream", e => { I(e) }); a = t; $(".meet-controls-bar").show() }, e => { console.log(e) }) }) } function N() { if (c) { A() } try { u = new WebSocket("ws://127.0.0.1:5678"); $("#remote-video").hide(); u.addEventListener("open", function (e) { navigator.mediaDevices.getDisplayMedia({ video: true }).then(e => { d = e; let t = d.getVideoTracks()[0]; t.onended = () => { A() }; if (l) { let e = a.peerConnection.getSenders().find(function (e) { return e.track.kind == t.kind }); e.replaceTrack(t); c = true; s.send(JSON.stringify({ mode: "ALERT", data: 0 })) } $("#title").text("Screen is being shared"); console.log(d); $("#startScreenShareBtn").hide(); $("#stopScreenShareBtn").show() }); console.log("connected with local socket") }); u.onerror = e => { J("Cannot connect to client, ensure client is running") } } catch (e) { J(e.message) } } function A() { if (!c) return; let t = r.getVideoTracks()[0]; if (l) { let e = a.peerConnection.getSenders().find(function (e) { return e.track.kind == t.kind }); e.replaceTrack(t) } d.getTracks().forEach(function (e) { e.stop() }); $("#remote-video").show(); $("#title").text("Simple Controller"); u.close(); s.send(JSON.stringify({ mode: "ALERT", data: 1 })); $("#startScreenShareBtn").show(); $("#stopScreenShareBtn").hide(); c = false }